// Find the Digits

// Problem Statement
// You are given two numbers x and y represented as strings. y is generated by random shuffling x and then adding 0 to n more digits at any random positions.

// Create a function that takes in these two numbers (x and y) as string inputs and returns the newly inserted digit(s) that was/were 
// added to y in the form of a concatenated string of all the newly added digit(s) in an ascending order. Only sets or maps may be used in your implementation.

// Note: A single digit can be added more than once in the new number.

// Constraints
// x and y > 0
// 0 < x.length, y.length <= 10^8
// y.length >= x.length

// Example 1
// Input: 8 56981234
// Output: 1234569

// Example 2
// Input: 1234 12345
// Output: 5

// Explanation
// The sample input consists of two strings separated by a space and the sample output consists of the newly inserted digit(s) that was/were added to the shuffled first string in an ascending order.

#include <iostream>
#include <string>
#include <algorithm>
#include <map>

std::string findTheDigits(std::string x, std::string y) {
	std::map<char, int> freqX, freqY;

	for (int i = 0; i < x.length(); i++) {
		freqX[x[i]]++;
	}

	for (int i = 0; i < y.length(); i++) {
		freqY[y[i]]++;
	}

	std::string result;

	for (auto digit : freqY) {
		int count = digit.second - freqX[digit.first];
		while (count > 0) {
			result += digit.first;
			count--;
		}
	}
	return result;
}